// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type RouteMessageRecorder struct {
	RecordMessageTransitTimeStub        func(time int64)
	recordMessageTransitTimeMutex       sync.RWMutex
	recordMessageTransitTimeArgsForCall []struct {
		time int64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RouteMessageRecorder) RecordMessageTransitTime(time int64) {
	fake.recordMessageTransitTimeMutex.Lock()
	fake.recordMessageTransitTimeArgsForCall = append(fake.recordMessageTransitTimeArgsForCall, struct {
		time int64
	}{time})
	fake.recordInvocation("RecordMessageTransitTime", []interface{}{time})
	fake.recordMessageTransitTimeMutex.Unlock()
	if fake.RecordMessageTransitTimeStub != nil {
		fake.RecordMessageTransitTimeStub(time)
	}
}

func (fake *RouteMessageRecorder) RecordMessageTransitTimeCallCount() int {
	fake.recordMessageTransitTimeMutex.RLock()
	defer fake.recordMessageTransitTimeMutex.RUnlock()
	return len(fake.recordMessageTransitTimeArgsForCall)
}

func (fake *RouteMessageRecorder) RecordMessageTransitTimeArgsForCall(i int) int64 {
	fake.recordMessageTransitTimeMutex.RLock()
	defer fake.recordMessageTransitTimeMutex.RUnlock()
	return fake.recordMessageTransitTimeArgsForCall[i].time
}

func (fake *RouteMessageRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.recordMessageTransitTimeMutex.RLock()
	defer fake.recordMessageTransitTimeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RouteMessageRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
